<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WuRuoHui &#30340;&#20010;&#20154;&#21338;&#23458;</title><link>https://wuruohui.github.io</link><atom:link href="https://wuruohui.github.io/rss.xml" rel="self" type="application/rss+xml" /><description>&#35760;&#24405;&#31934;&#24425;&#30340;&#31243;&#24207;&#20154;&#29983;</description><generator>Solo, v4.3.1, https://b3log.org/solo</generator><lastBuildDate>Sun, 21 Feb 2021 15:59:54 +0800</lastBuildDate><language>zh-cn</language><item><title>&#19990;&#30028;&#65292;&#20320;&#22909;&#65281;</title><link>https://wuruohui.github.io/hello-solo</link><description><![CDATA[<p><img src="https://b3logfile.com/bing/20190118.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100" alt=""></p>
<p>Solo 博客系统已经初始化完毕，可在管理后台 - 工具 - 偏好设定中调整更多细节设置。如果需要导入已有博客文章，请参考文档 <a href="https://ld246.com/article/1498490209748" target="_blank">Solo 支持 Hexo/Jekyll 数据导入</a>。</p>
<p>对了，出于安全考虑请尽快完成如下操作：</p>
<ol>
<li>登录链滴社区后，在<a href="https://ld246.com/settings/b3" target="_blank">个人设置 - B3</a> 中更新 B3 Key</li>
<li>在 Solo 管理后台 - 工具 - 用户管理中也进行同样的 B3 Key 更新</li>
</ol>
<p>另外，如果你需要开启评论系统，请参考 <a href="https://ld246.com/article/1594988019287" target="_blank">Solo 集成 Gitalk 评论系统</a>。</p>
<p>最后，如果你觉得 Solo 很赞的话，请到<a href="https://github.com/88250/solo" target="_blank">项目主页</a> Watch、Star、Fork 三连 😍</p>]]></description><author>WuRuoHui</author><guid>https://wuruohui.github.io/hello-solo</guid><category>Solo</category><pubDate>Sun, 21 Feb 2021 15:58:30 +0800</pubDate></item><item><title>Spring Boot2&#33258;&#21160;&#37197;&#32622;</title><link>https://wuruohui.github.io/articles/2021/02/04/1612452633654.html</link><description><![CDATA[<p>1、SpringBoot特点 1.1、依赖管理  父项目做依赖管理  依赖管理 &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.3.4.RELEASE&lt;/version&gt; &lt;/parent&gt; 他的父项目 &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt; &lt;version&gt;2.3.4.RELEASE&lt;/version&gt; &lt;/parent&gt; 几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制   开发导入starter场景启动器  1. 见到很多 spring-....</p>]]></description><author>WuRuoHui</author><guid>https://wuruohui.github.io/articles/2021/02/04/1612452633654.html</guid><category>&#23398;&#20064;&#31508;&#35760;</category><category>SpringBoot2</category><pubDate>Thu, 04 Feb 2021 23:30:33 +0800</pubDate></item><item><title>Spring Boot2</title><link>https://wuruohui.github.io/articles/2021/02/04/1612396619399.html</link><description><![CDATA[<p>01、Spring与SpringBoot 1、Spring能做什么 1.1、Spring的能力  1.2、Spring的生态 <a href="https://spring.io/projects/spring-boot" target="_blank">https://spring.io/projects/spring-boot</a> 覆盖了： web开发 数据访问 安全控制 分布式 消息服务 移动开发 批处理 ...... 1.3、Spring5重大升级 1.3.1、响应式编程  1.3.2、内部源码设计 基于Java8的一些新特性，如：接口默认实现。重新设计源码架构。 2、为什么用SpringBoot  Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can "just run". 能快速创建出生产级别的Spring应用  2.1、SpringBoot优点   Create stand-alone Spring applications  创建独立Spring应用    Embed Tomcat, Jetty or Undertow directly (no n....</p>]]></description><author>WuRuoHui</author><guid>https://wuruohui.github.io/articles/2021/02/04/1612396619399.html</guid><category>SpringBoot2</category><category>&#23398;&#20064;&#31508;&#35760;</category><pubDate>Thu, 04 Feb 2021 07:56:59 +0800</pubDate></item><item><title>Spring Security</title><link>https://wuruohui.github.io/articles/2021/02/03/1612338859541.html</link><description><![CDATA[<p>依赖 &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.2.1.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifact....</p>]]></description><author>WuRuoHui</author><guid>https://wuruohui.github.io/articles/2021/02/03/1612338859541.html</guid><category>&#23398;&#20064;&#31508;&#35760;</category><category>SpringSecurity</category><category>SpringBoot</category><pubDate>Wed, 03 Feb 2021 15:54:19 +0800</pubDate></item><item><title>2021-1-13-&#33538;&#21517;</title><link>https://wuruohui.github.io/articles/2021/01/13/1610506947417.html</link><description><![CDATA[]]></description><author>WuRuoHui</author><guid>https://wuruohui.github.io/articles/2021/01/13/1610506947417.html</guid><category>&#38543;&#31508;</category><pubDate>Wed, 13 Jan 2021 11:02:27 +0800</pubDate></item><item><title>Spring Boot&#28909;&#37096;&#32626;&#12289;&#30417;&#25511;&#31649;&#29702;</title><link>https://wuruohui.github.io/articles/2020/12/30/1609329681201.html</link><description><![CDATA[<p>热部署 &lt;!-- 开启热部署 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt;  1.setting中compiler开启 Build project automatically 2.Ctrl+Alt+Shift+? -&gt; 点击Registry -&gt; 打开Compiler.automake.allow.when.app.running 监控管理 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &amp;lt....</p>]]></description><author>WuRuoHui</author><guid>https://wuruohui.github.io/articles/2020/12/30/1609329681201.html</guid><category>SpringBoot</category><category>&#23398;&#20064;&#31508;&#35760;</category><pubDate>Wed, 30 Dec 2020 20:01:21 +0800</pubDate></item><item><title>Spring Boot&#19982;&#20998;&#24067;&#24335;</title><link>https://wuruohui.github.io/articles/2020/12/27/1609000344400.html</link><description><![CDATA[<p>Spring Boot与dubbo ZooKeeper ZooKeeper 是一个分布式的，开放源码的分布式应用程序协调服务。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。 Dubbo Dubbo是Alibaba开源的分布式服务框架，它最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。从服务模型的角度来看，Dubbo采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方（Provider）和服务消费方（Consumer）两个角色。   docker下载zookeeper 启动zookeeper  docker run --name some-zookeeper -p 2181:2181 --restart always -d zookeeper  导入依赖  &lt;!-- Dubbo Spring Boot Starter --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.dubbo....</p>]]></description><author>WuRuoHui</author><guid>https://wuruohui.github.io/articles/2020/12/27/1609000344400.html</guid><category>SpringBoot</category><category>&#23398;&#20064;&#31508;&#35760;</category><pubDate>Sun, 27 Dec 2020 00:32:24 +0800</pubDate></item><item><title>Spring Boot&#19982;&#23433;&#20840;</title><link>https://wuruohui.github.io/articles/2020/12/26/1608991818381.html</link><description><![CDATA[<p>“认证”（Authentication），是建立一个他声明的主体的过程（一个“主体”一般是指用户，设备或一些可以在你的应用程序中执行动作的其他系统）。 “授权”（Authorization）指确定一个主体是否允许在你的应用程序执行一个动作的过程。为了抵达需要授权的店，主体的身份已经有认证过程建立。 SpringSecurity与SpringMVC 依赖 &lt;dependency&gt; &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; &lt;artifactId&gt;spring-security-taglibs&lt;/artifactId&gt; &lt;version&gt;5.1.5.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; &lt;artifactId&gt;spring-security-conf....</p>]]></description><author>WuRuoHui</author><guid>https://wuruohui.github.io/articles/2020/12/26/1608991818381.html</guid><category>&#23398;&#20064;&#31508;&#35760;</category><category>SpringBoot</category><pubDate>Sat, 26 Dec 2020 22:10:18 +0800</pubDate></item><item><title>Spring Boot&#19982;&#20219;&#21153;</title><link>https://wuruohui.github.io/articles/2020/12/24/1608769224234.html</link><description><![CDATA[<p>异步任务 @EnableAsync //开启异步注解 public class SpringbootdemoApplication {  @Async //异步方法 public void async() { try { Thread.sleep(3000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println("处理中"); }  定时任务 Spring为我们提供了异步执行任务调度的方式，提供TaskExecutor 、TaskScheduler 接口。 两个注解：@EnableScheduling、@Scheduled cron表达式：   字段允许值允许的特殊字符   秒0-59, - * / 分0-59, - * / 小时0-23, - * / 日期1-31, - * ? / L W C 月份1-12, - * / 星期0-7或SUN-SAT 0,7是SUN, - * ? / L C #     特殊字符代表含义   ,枚举 -区间 *任意 /步长 ?日/星期冲突匹配 L最后....</p>]]></description><author>WuRuoHui</author><guid>https://wuruohui.github.io/articles/2020/12/24/1608769224234.html</guid><category>&#23398;&#20064;&#31508;&#35760;</category><category>SpringBoot</category><pubDate>Thu, 24 Dec 2020 08:20:24 +0800</pubDate></item><item><title>Spring Boot&#19982;&#26816;&#32034;</title><link>https://wuruohui.github.io/articles/2020/12/23/1608711683692.html</link><description><![CDATA[<p>Elasticsearch是一个分布式搜索服务，提供Restful API，底层基于Lucene，采用多shard（分片）的方式保证数据安全，并且提供自动resharding的功能，github等大型的站点也是采用了ElasticSearch作为其搜索服务， 安装 dokcer pull elasticsearch docker run -e ES_JAVA_OPTS="-Xms256m -Xmx256m" -d -p 9200:9200 -p 9300:9300 --name 容器名称 镜像id -e设置了内存大小，防止测试环境内存不够导致启动失败，9200是默认端口 -e "discovery.type=single-node"单节点部署 Elasticsearch: 权威指南 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/2.x/index-doc.html" target="_blank">https://www.elastic.co/guide/cn/elasticsearch/guide/2.x/index-doc.html</a> 存储数据到 Elasticsearch 的行为叫做 索引 一个 Elasticsearch 集群可以 包含多个 索引 ，相应的每个索引可以包含多个 类型 。 这些不同....</p>]]></description><author>WuRuoHui</author><guid>https://wuruohui.github.io/articles/2020/12/23/1608711683692.html</guid><category>SpringBoot</category><category>&#23398;&#20064;&#31508;&#35760;</category><category>Elasticsearch</category><pubDate>Wed, 23 Dec 2020 16:21:23 +0800</pubDate></item></channel></rss>