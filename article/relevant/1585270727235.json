{"relevantArticles":[{"articleTitle":"Spring Boot2自动配置","articleAbstractText":"1、SpringBoot特点 1.1、依赖管理 父项目做依赖管理 依赖管理 &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.3.4.RELEASE&lt;/version&gt; &lt;/parent&gt; 他的父项目 &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt; &lt;version&gt;2.3.4.RELEASE&lt;/version&gt; &lt;/parent&gt; 几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制 开发导入starter场景启动器 1. 见到很多 spring-....","articleStatus":0,"articlePermalink":"/articles/2021/02/04/1612452633654.html","articleImg1URL":"https://b3logfile.com/file/2021/02/solofetchupload8127028033331902327-134311ac.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"Spring Boot2","articleAbstractText":"01、Spring与SpringBoot 1、Spring能做什么 1.1、Spring的能力 1.2、Spring的生态 https://spring.io/projects/spring-boot 覆盖了： web开发 数据访问 安全控制 分布式 消息服务 移动开发 批处理 ...... 1.3、Spring5重大升级 1.3.1、响应式编程 1.3.2、内部源码设计 基于Java8的一些新特性，如：接口默认实现。重新设计源码架构。 2、为什么用SpringBoot Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can \"just run\". 能快速创建出生产级别的Spring应用 2.1、SpringBoot优点 Create stand-alone Spring applications 创建独立Spring应用 Embed Tomcat, Jetty or Undertow directly (no n....","articleStatus":0,"articlePermalink":"/articles/2021/02/04/1612396619399.html","articleImg1URL":"https://b3logfile.com/file/2021/02/solofetchupload1620669083251881989-76e62460.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"Spring Boot入门","articleAbstractText":"示例 依赖 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.3.6.RELEASE&lt;/version&gt; &lt;relati....","articleStatus":0,"articlePermalink":"/articles/2020/11/16/1605486187962.html","articleImg1URL":"https://b3logfile.com/file/2020/11/image-31048e9d.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"Spring Security","articleAbstractText":"依赖 &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.2.1.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifact....","articleStatus":0,"articlePermalink":"/articles/2021/02/03/1612338859541.html","articleImg1URL":"https://b3logfile.com/bing/20200513.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Spring注解驱动开发拓展","articleAbstractText":"BeanFactoryPostProcessor BeanFactoryPostProcessor：BeanFactory的后置处理器，在BeanFactory标准初始化之后调用，所有的Bean定义已经保存加载到BeanFactory，但是Bean的实例还未创建 执行时机： （1）IOC创建容器对象 （2）invokeBeanFactoryPostProcessors(beanFactory) -- 执行BeanFactoryProcessor 如何找到所有的BeanFactoryProcessor？ 直接在BeanFactory中找到所有类型是BeanFactoryPostProcessor的组件，并执行他们的方法 在初始化创建其他组件之前执行 @Component public class MyBeanFactoryPostProcessor implements BeanFactoryPostProcessor { public void postProcessBeanFactory(ConfigurableListableBeanFactory configurableLi......","articleStatus":0,"articlePermalink":"/articles/2020/10/25/1603583704409.html","articleImg1URL":"https://b3logfile.com/bing/20190422.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}