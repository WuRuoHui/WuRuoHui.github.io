{"relevantArticles":[{"articleTitle":"Spring Boot与任务","articleAbstractText":"异步任务 @EnableAsync //开启异步注解 public class SpringbootdemoApplication { @Async //异步方法 public void async() { try { Thread.sleep(3000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\"处理中\"); } 定时任务 Spring为我们提供了异步执行任务调度的方式，提供TaskExecutor 、TaskScheduler 接口。\u000b 两个注解：@EnableScheduling、@Scheduled cron表达式： 字段允许值允许的特殊字符 秒0-59, - * / 分0-59, - * / 小时0-23, - * / 日期1-31, - * ? / L W C 月份1-12, - * / 星期0-7或SUN-SAT 0,7是SUN, - * ? / L C # 特殊字符代表含义 ,枚举 -区间 *任意 /步长 ?日/星期冲突匹配 L最后....","articleStatus":0,"articlePermalink":"/articles/2020/12/24/1608769224234.html","articleImg1URL":"https://b3logfile.com/bing/20181207.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Spring Boot热部署、监控管理","articleAbstractText":"热部署 &lt;!-- 开启热部署 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; 1.setting中compiler开启 Build project automatically 2.Ctrl+Alt+Shift+? -&gt; 点击Registry -&gt; 打开Compiler.automake.allow.when.app.running 监控管理 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &amp....","articleStatus":0,"articlePermalink":"/articles/2020/12/30/1609329681201.html","articleImg1URL":"https://b3logfile.com/file/2020/12/image-dd1e0c37.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"Spring Boot之配置","articleAbstractText":"配置文件 SpringBoot 使用一个全局的配置文件，配置文件名是固定的；用来修改SpringBoot自动配置的默认值 application.properties 跟 yml 文件类似，二者选择其一使用 person.age=20 #map的配置形式，每个键值对分开配置 person.map.k1=v1 person.map.k2=v2 #list的配置形式，每个元素用逗号隔开 person.list=a,b,c #对象的配置形式，对象中的每个属性分开赋值 person.dog.name=dog person.dog.age=10 application.yml YAML（YAML Ain't Markup Language) 标记语言： 以前的配置文件大多都是 XML 文件 YAML：以数据为中心，比 JSON、XML 等更适合做配置文件 server: port: 8081 基本语法 k: v：表示一对键值对（值前面必须有一个空格），以空格的缩进来控制层级关系，只要是左对齐的一列数据都是同一个层级的 server: port: 8081 path: /hello 属性和值.......","articleStatus":0,"articlePermalink":"/articles/2020/11/20/1605886055349.html","articleImg1URL":"https://b3logfile.com/bing/20200714.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Spring注解驱动开发之声明式事务","articleAbstractText":"简单使用 1.导入相关依赖 &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;4.2.6.RELEASE&lt;/version&gt; &lt;/dependency&gt; 2.配置数据源、JdbcTemplate（Spring提供的简化数据库操作工具） @Bean public DataSource dataSource() throws PropertyVetoException { ComboPooledDataSource dataSource = new ComboPooledDataSource(); dataSource.setUser(\"root\"); dataSource.setPassword(\"458974tl\"); dataSource.setJdbcUrl(\"jdbc:mysql://localhost:3306/test?useSSL=f.....","articleStatus":0,"articlePermalink":"/articles/2020/10/22/1603377269375.html","articleImg1URL":"https://b3logfile.com/bing/20180912.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Spring Boot与分布式","articleAbstractText":"Spring Boot与dubbo ZooKeeper ZooKeeper 是一个分布式的，开放源码的分布式应用程序协调服务。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。 Dubbo Dubbo是Alibaba开源的分布式服务框架，它最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。从服务模型的角度来看，Dubbo采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方（Provider）和服务消费方（Consumer）两个角色。 docker下载zookeeper 启动zookeeper docker run --name some-zookeeper -p 2181:2181 --restart always -d zookeeper 导入依赖 &lt;!-- Dubbo Spring Boot Starter --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.dubbo....","articleStatus":0,"articlePermalink":"/articles/2020/12/27/1609000344400.html","articleImg1URL":"https://b3logfile.com/file/2020/12/image-d6ba88d1.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"}]}