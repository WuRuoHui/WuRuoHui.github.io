{"relevantArticles":[{"articleTitle":"Spring注解驱动开发拓展","articleAbstractText":"BeanFactoryPostProcessor BeanFactoryPostProcessor：BeanFactory的后置处理器，在BeanFactory标准初始化之后调用，所有的Bean定义已经保存加载到BeanFactory，但是Bean的实例还未创建 执行时机： （1）IOC创建容器对象 （2）invokeBeanFactoryPostProcessors(beanFactory) -- 执行BeanFactoryProcessor 如何找到所有的BeanFactoryProcessor？ 直接在BeanFactory中找到所有类型是BeanFactoryPostProcessor的组件，并执行他们的方法 在初始化创建其他组件之前执行 @Component public class MyBeanFactoryPostProcessor implements BeanFactoryPostProcessor { public void postProcessBeanFactory(ConfigurableListableBeanFactory configurableLi......","articleStatus":0,"articlePermalink":"/articles/2020/10/25/1603583704409.html","articleImg1URL":"https://b3logfile.com/bing/20190422.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Spring Boot之配置","articleAbstractText":"配置文件 SpringBoot 使用一个全局的配置文件，配置文件名是固定的；用来修改SpringBoot自动配置的默认值 application.properties 跟 yml 文件类似，二者选择其一使用 person.age=20 #map的配置形式，每个键值对分开配置 person.map.k1=v1 person.map.k2=v2 #list的配置形式，每个元素用逗号隔开 person.list=a,b,c #对象的配置形式，对象中的每个属性分开赋值 person.dog.name=dog person.dog.age=10 application.yml YAML（YAML Ain't Markup Language) 标记语言： 以前的配置文件大多都是 XML 文件 YAML：以数据为中心，比 JSON、XML 等更适合做配置文件 server: port: 8081 基本语法 k: v：表示一对键值对（值前面必须有一个空格），以空格的缩进来控制层级关系，只要是左对齐的一列数据都是同一个层级的 server: port: 8081 path: /hello 属性和值.......","articleStatus":0,"articlePermalink":"/articles/2020/11/20/1605886055349.html","articleImg1URL":"https://b3logfile.com/bing/20200714.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Spring注解驱动开发之AOP","articleAbstractText":"AOP指在程序运行期间动态地将某段代码切入到指定位置进行运行的编程方式 -- 动态代理 简单使用 步骤： 1.导入AOP模块：Spring AOP -- spring-aspects 2.定义一个业务逻辑类，运行期间打印日志 3.定义一个日志切面类 通知方法： （1）前置通知(@Before)：在目标方法运行之前运行 （2）后置通知(@After)：在目标方法运行之后运行（无论方法正常结束还是异常结束） （3）返回通知(@AfterReturning)：在目标方法正常返回之后运行 （4）异常通知(@AfterThrowing)：在目标方法出现异常以后运行 （5）环绕通知(@Around)：动态代理，手动推进目标方法就行 4.给切面类的目标方法标注何时何地运行（通知注解） 5.将切面类和业务逻辑类都加入到容器中 6.告诉Spring哪个类是切面类 -- 给切面类加上 @Aspect 注解 7.开启AspectJAutoProxy -- 在配置类加上 @EnableAspectJAutoProxy 注解 //配置类 @Configuration @EnableAspectJAutoProx....","articleStatus":0,"articlePermalink":"/articles/2020/10/20/1603206892093.html","articleImg1URL":"https://b3logfile.com/file/2020/10/image-5b300cac.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"Spring注解驱动开发","articleAbstractText":"传统配置文件 （1）编写xml文件 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"&gt; &lt;!-- 包扫描，只要标注了@....","articleStatus":0,"articlePermalink":"/articles/2020/09/13/1599930121339.html","articleImg1URL":"https://b3logfile.com/bing/20190514.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Spring Boot与任务","articleAbstractText":"异步任务 @EnableAsync //开启异步注解 public class SpringbootdemoApplication { @Async //异步方法 public void async() { try { Thread.sleep(3000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\"处理中\"); } 定时任务 Spring为我们提供了异步执行任务调度的方式，提供TaskExecutor 、TaskScheduler 接口。\u000b 两个注解：@EnableScheduling、@Scheduled cron表达式： 字段允许值允许的特殊字符 秒0-59, - * / 分0-59, - * / 小时0-23, - * / 日期1-31, - * ? / L W C 月份1-12, - * / 星期0-7或SUN-SAT 0,7是SUN, - * ? / L C # 特殊字符代表含义 ,枚举 -区间 *任意 /步长 ?日/星期冲突匹配 L最后....","articleStatus":0,"articlePermalink":"/articles/2020/12/24/1608769224234.html","articleImg1URL":"https://b3logfile.com/bing/20181207.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}