{"relevantArticles":[{"articleTitle":"Spring Boot之配置","articleAbstractText":"配置文件 SpringBoot 使用一个全局的配置文件，配置文件名是固定的；用来修改SpringBoot自动配置的默认值 application.properties 跟 yml 文件类似，二者选择其一使用 person.age=20 #map的配置形式，每个键值对分开配置 person.map.k1=v1 person.map.k2=v2 #list的配置形式，每个元素用逗号隔开 person.list=a,b,c #对象的配置形式，对象中的每个属性分开赋值 person.dog.name=dog person.dog.age=10 application.yml YAML（YAML Ain't Markup Language) 标记语言： 以前的配置文件大多都是 XML 文件 YAML：以数据为中心，比 JSON、XML 等更适合做配置文件 server: port: 8081 基本语法 k: v：表示一对键值对（值前面必须有一个空格），以空格的缩进来控制层级关系，只要是左对齐的一列数据都是同一个层级的 server: port: 8081 path: /hello 属性和值.......","articleStatus":0,"articlePermalink":"/articles/2020/11/20/1605886055349.html","articleImg1URL":"https://b3logfile.com/bing/20200714.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Spring Boot2","articleAbstractText":"01、Spring与SpringBoot 1、Spring能做什么 1.1、Spring的能力 1.2、Spring的生态 https://spring.io/projects/spring-boot 覆盖了： web开发 数据访问 安全控制 分布式 消息服务 移动开发 批处理 ...... 1.3、Spring5重大升级 1.3.1、响应式编程 1.3.2、内部源码设计 基于Java8的一些新特性，如：接口默认实现。重新设计源码架构。 2、为什么用SpringBoot Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can \"just run\". 能快速创建出生产级别的Spring应用 2.1、SpringBoot优点 Create stand-alone Spring applications 创建独立Spring应用 Embed Tomcat, Jetty or Undertow directly (no n....","articleStatus":0,"articlePermalink":"/articles/2021/02/04/1612396619399.html","articleImg1URL":"https://b3logfile.com/file/2021/02/solofetchupload1620669083251881989-76e62460.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"Spring注解驱动开发拓展","articleAbstractText":"BeanFactoryPostProcessor BeanFactoryPostProcessor：BeanFactory的后置处理器，在BeanFactory标准初始化之后调用，所有的Bean定义已经保存加载到BeanFactory，但是Bean的实例还未创建 执行时机： （1）IOC创建容器对象 （2）invokeBeanFactoryPostProcessors(beanFactory) -- 执行BeanFactoryProcessor 如何找到所有的BeanFactoryProcessor？ 直接在BeanFactory中找到所有类型是BeanFactoryPostProcessor的组件，并执行他们的方法 在初始化创建其他组件之前执行 @Component public class MyBeanFactoryPostProcessor implements BeanFactoryPostProcessor { public void postProcessBeanFactory(ConfigurableListableBeanFactory configurableLi......","articleStatus":0,"articlePermalink":"/articles/2020/10/25/1603583704409.html","articleImg1URL":"https://b3logfile.com/bing/20190422.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"常见查找算法","articleAbstractText":"二分查找 二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。 首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。 public static void binarySearch(int[] arr, int target) { int start = 0; int end = arr.length - 1; boolean flag = true; while (start &lt;= end) { int middle = (start + end) / 2; if (arr[middle] == target) { flag = false; System.out.println(middle); break; .....","articleStatus":0,"articlePermalink":"/articles/2020/03/29/1585492917761.html","articleImg1URL":"https://img.hacpai.com/file/2020/03/二分查找-9423799c.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"Spring Security","articleAbstractText":"依赖 &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.2.1.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifact....","articleStatus":0,"articlePermalink":"/articles/2021/02/03/1612338859541.html","articleImg1URL":"https://b3logfile.com/bing/20200513.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}