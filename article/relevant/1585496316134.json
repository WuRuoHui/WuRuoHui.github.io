{"relevantArticles":[{"articleTitle":"Spring Boot2","articleAbstractText":"01、Spring与SpringBoot 1、Spring能做什么 1.1、Spring的能力 1.2、Spring的生态 https://spring.io/projects/spring-boot 覆盖了： web开发 数据访问 安全控制 分布式 消息服务 移动开发 批处理 ...... 1.3、Spring5重大升级 1.3.1、响应式编程 1.3.2、内部源码设计 基于Java8的一些新特性，如：接口默认实现。重新设计源码架构。 2、为什么用SpringBoot Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can \"just run\". 能快速创建出生产级别的Spring应用 2.1、SpringBoot优点 Create stand-alone Spring applications 创建独立Spring应用 Embed Tomcat, Jetty or Undertow directly (no n....","articleStatus":0,"articlePermalink":"/articles/2021/02/04/1612396619399.html","articleImg1URL":"https://b3logfile.com/file/2021/02/solofetchupload1620669083251881989-76e62460.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"常见查找算法","articleAbstractText":"二分查找 二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。 首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。 public static void binarySearch(int[] arr, int target) { int start = 0; int end = arr.length - 1; boolean flag = true; while (start &lt;= end) { int middle = (start + end) / 2; if (arr[middle] == target) { flag = false; System.out.println(middle); break; .....","articleStatus":0,"articlePermalink":"/articles/2020/03/29/1585492917761.html","articleImg1URL":"https://img.hacpai.com/file/2020/03/二分查找-9423799c.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"Spring Boot热部署、监控管理","articleAbstractText":"热部署 &lt;!-- 开启热部署 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; 1.setting中compiler开启 Build project automatically 2.Ctrl+Alt+Shift+? -&gt; 点击Registry -&gt; 打开Compiler.automake.allow.when.app.running 监控管理 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &amp....","articleStatus":0,"articlePermalink":"/articles/2020/12/30/1609329681201.html","articleImg1URL":"https://b3logfile.com/file/2020/12/image-dd1e0c37.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"Spring Boot入门","articleAbstractText":"示例 依赖 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.3.6.RELEASE&lt;/version&gt; &lt;relati....","articleStatus":0,"articlePermalink":"/articles/2020/11/16/1605486187962.html","articleImg1URL":"https://b3logfile.com/file/2020/11/image-31048e9d.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"Spring注解驱动开发之声明式事务","articleAbstractText":"简单使用 1.导入相关依赖 &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;4.2.6.RELEASE&lt;/version&gt; &lt;/dependency&gt; 2.配置数据源、JdbcTemplate（Spring提供的简化数据库操作工具） @Bean public DataSource dataSource() throws PropertyVetoException { ComboPooledDataSource dataSource = new ComboPooledDataSource(); dataSource.setUser(\"root\"); dataSource.setPassword(\"458974tl\"); dataSource.setJdbcUrl(\"jdbc:mysql://localhost:3306/test?useSSL=f.....","articleStatus":0,"articlePermalink":"/articles/2020/10/22/1603377269375.html","articleImg1URL":"https://b3logfile.com/bing/20180912.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}