{"randomArticles":[{"articleTitle":"Spring Boot与检索","articleAbstractText":"Elasticsearch是一个分布式搜索服务，提供Restful API，底层基于Lucene，采用多shard（分片）的方式保证数据安全，并且提供自动resharding的功能，github等大型的站点也是采用了ElasticSearch作为其搜索服务， 安装 dokcer pull elasticsearch docker run -e ES_JAVA_OPTS=\"-Xms256m -Xmx256m\" -d -p 9200:9200 -p 9300:9300 --name 容器名称 镜像id -e设置了内存大小，防止测试环境内存不够导致启动失败，9200是默认端口 -e \"discovery.type=single-node\"单节点部署 Elasticsearch: 权威指南 https://www.elastic.co/guide/cn/elasticsearch/guide/2.x/index-doc.html 存储数据到 Elasticsearch 的行为叫做 索引 一个 Elasticsearch 集群可以 包含多个 索引 ，相应的每个索引可以包含多个 类型 。 这些不同....","articleStatus":0,"articlePermalink":"/articles/2020/12/23/1608711683692.html","articleImg1URL":"https://b3logfile.com/file/2020/12/image-5b05ad94.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"Spring Boot2自动配置","articleAbstractText":"1、SpringBoot特点 1.1、依赖管理 父项目做依赖管理 依赖管理 &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.3.4.RELEASE&lt;/version&gt; &lt;/parent&gt; 他的父项目 &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt; &lt;version&gt;2.3.4.RELEASE&lt;/version&gt; &lt;/parent&gt; 几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制 开发导入starter场景启动器 1. 见到很多 spring-....","articleStatus":0,"articlePermalink":"/articles/2021/02/04/1612452633654.html","articleImg1URL":"https://b3logfile.com/file/2021/02/solofetchupload8127028033331902327-134311ac.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"Spring Security","articleAbstractText":"依赖 &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.2.1.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifact....","articleStatus":0,"articlePermalink":"/articles/2021/02/03/1612338859541.html","articleImg1URL":"https://b3logfile.com/bing/20200513.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Spring Boot与缓存","articleAbstractText":"JSR107 Java Caching定义了5个核心接口，分别是CachingProvider, CacheManager, Cache, Entry 和 Expiry。 CachingProvider定义了创建、配置、获取、管理和控制多个CacheManager。一个应用可以在运行期访问多个CachingProvider。 CacheManager定义了创建、配置、获取、管理和控制多个唯一命名的Cache，这些Cache存在于CacheManager的上下文中。一个CacheManager仅被一个CachingProvider所拥有。 Cache是一个类似Map的数据结构并临时存储以Key为索引的值。一个Cache仅被一个CacheManager所拥有。 Entry是一个存储在Cache中的key-value对。 Expiry 每一个存储在Cache中的条目有一个定义的有效期。一旦超过这个时间，条目为过期的状态。一旦过期，条目将不可访问、更新和删除。缓存有效期可以通过ExpiryPolicy设置。 JSR-107规范 提取码:uAjL Spring缓存抽象 Cache缓存接....","articleStatus":0,"articlePermalink":"/articles/2020/12/09/1607513352385.html","articleImg1URL":"https://b3logfile.com/file/2020/12/image-9b2c5e93.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"Docker","articleAbstractText":"Docker是一个开源的应用容器引擎，是一个轻量级容器引擎 Docker支持将软件编译成一个镜像，然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像 运行中的这个镜像成为容器，容器的启动是非常快速的 核心概念 docker主机(Host)：安装了Docker程序的主机（Docker直接安装在操作系统之上） docker客户端(Client)：连接docker主机进行操作 docker仓库(Registry)：用来保存各种打包好的软件镜像 docker镜像(Images)：软件打包好的镜像，反正docker仓库中 docer容器(Container)：镜像启动后的实例称为一个容器，容器是独立运行的一个或者一组应用 使用docker的步骤 安装Docker 去Docker仓库找到这个软件对应的镜像 使用Docker运行这个镜像，这个镜像就会变成一个Docker容器 对容器的启动停止就是对软件的启动停止 安装docker 步骤： 1.检查内核版本，必须是3.10及以上 uname -r 2.内核版本过低，升级内核 导入publi key rpm --....","articleStatus":0,"articlePermalink":"/articles/2020/10/10/1602344371094.html","articleImg1URL":"https://b3logfile.com/bing/20190103.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}