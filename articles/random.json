{"randomArticles":[{"articleTitle":"Spring Boot2自动配置","articleAbstractText":"1、SpringBoot特点 1.1、依赖管理 父项目做依赖管理 依赖管理 &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.3.4.RELEASE&lt;/version&gt; &lt;/parent&gt; 他的父项目 &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt; &lt;version&gt;2.3.4.RELEASE&lt;/version&gt; &lt;/parent&gt; 几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制 开发导入starter场景启动器 1. 见到很多 spring-....","articleStatus":0,"articlePermalink":"/articles/2021/02/04/1612452633654.html","articleImg1URL":"https://b3logfile.com/file/2021/02/solofetchupload8127028033331902327-134311ac.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"Spring Security","articleAbstractText":"依赖 &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.2.1.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifact....","articleStatus":0,"articlePermalink":"/articles/2021/02/03/1612338859541.html","articleImg1URL":"https://b3logfile.com/bing/20200513.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Spring Boot与任务","articleAbstractText":"异步任务 @EnableAsync //开启异步注解 public class SpringbootdemoApplication { @Async //异步方法 public void async() { try { Thread.sleep(3000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\"处理中\"); } 定时任务 Spring为我们提供了异步执行任务调度的方式，提供TaskExecutor 、TaskScheduler 接口。\u000b 两个注解：@EnableScheduling、@Scheduled cron表达式： 字段允许值允许的特殊字符 秒0-59, - * / 分0-59, - * / 小时0-23, - * / 日期1-31, - * ? / L W C 月份1-12, - * / 星期0-7或SUN-SAT 0,7是SUN, - * ? / L C # 特殊字符代表含义 ,枚举 -区间 *任意 /步长 ?日/星期冲突匹配 L最后....","articleStatus":0,"articlePermalink":"/articles/2020/12/24/1608769224234.html","articleImg1URL":"https://b3logfile.com/bing/20181207.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"设计模式","articleAbstractText":"设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 1.单例模式 单例模式是一种常用的软件设计模式，其定义是单例对象的类只能允许一个实例存在。 （1）饿汉式 public class Singleton { //1.私有化的构造器 private Singleton() { } //2.内部创建类的对象 //4.要求此对象也必须声明为静态的 private static Singleton instance = new Singleton(); //3.提供公共的静态方法，返回类的对象 public static Singleton getInstance() { return instance; } } （2）懒汉式（线程不安全） public class Singleton { //1.私有化的构造器 private Singleton() { } //2.声明当前类的对象，没有初始化 //4.要求此对象也必须声明为静态的 private static Singleton instan.....","articleStatus":0,"articlePermalink":"/articles/2020/04/05/1586093326494.html","articleImg1URL":"https://b3logfile.com/bing/20191207.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Java POI","articleAbstractText":"MVAEN依赖 &lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; &lt;artifactId&gt;poi&lt;/artifactId&gt; &lt;version&gt;4.0.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt; &lt;version&gt;4.0.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; 读取Excel （1）读取Excel InputStream inputStream = file.getInputStream(); XSSFWorkbook xssfWorkbook = new XSSFWorkbook(inputStream); （2）获取sheet的个......","articleStatus":0,"articlePermalink":"/articles/2020/08/24/1598200478029.html","articleImg1URL":"https://b3logfile.com/bing/20190119.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}